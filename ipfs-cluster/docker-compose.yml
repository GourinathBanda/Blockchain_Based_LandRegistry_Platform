# This is an example docker-compose file to quickly test an IPFS Cluster
# with multiple peers on a contained environment.

# It runs 3 cluster peers (cluster0, cluster1...) attached to go-ipfs daemons
# (ipfs0, ipfs1...) using the CRDT consensus component. Cluster peers
# autodiscover themselves using mDNS on the docker internal network.
#
# To interact with the cluster use "ipfs-cluster-ctl" (the cluster0 API port is
# exposed to the locahost. You can also "docker exec -ti cluster0 sh" and run
# it from the container. "ipfs-cluster-ctl peers ls" should show all 3 peers a few
# seconds after start.
#
# For persistance, a "data" folder is created and used to store configurations
# and states. This can be used to edit configurations in subsequent runs. It looks
# as follows:
#
# data/
# |-- cluster0
# |-- cluster1
# |-- ...
# |-- ipfs0
# |-- ipfs1
# |-- ...
#
# During the first start, default configurations are created for all peers.

services:

  # cluster peer0

  ipfs0:
    container_name: ipfs0
    image: ipfs/go-ipfs:release
    environment:
      LIBP2P_FORCE_PNET: 1
      IPFS_SWARM_KEY: ${SWARM_KEY}
    ports:
        - 127.0.0.1:5001:5001
        - 127.0.0.1:8001:8080

    volumes:
      - ./data/ipfs0:/data/ipfs
      - ./init.sh:/usr/local/bin/start_ipfs

  # cluster peer1

  ipfs1:
    container_name: ipfs1
    image: ipfs/go-ipfs:release
    environment:
      LIBP2P_FORCE_PNET: 1
      IPFS_SWARM_KEY: ${SWARM_KEY}
    ports:
        - 127.0.0.1:6001:5001
    volumes:
      - ./data/ipfs1:/data/ipfs
      - ./init.sh:/usr/local/bin/start_ipfs

  # cluster peer2

  ipfs2:
    container_name: ipfs2
    image: ipfs/go-ipfs:release
    environment:
      LIBP2P_FORCE_PNET: 1
      IPFS_SWARM_KEY: ${SWARM_KEY}
    volumes:
      - ./data/ipfs2:/data/ipfs
      - ./init.sh:/usr/local/bin/start_ipfs
